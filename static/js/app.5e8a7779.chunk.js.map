{"version":3,"sources":["backend/Flashcards.backend.js","services/Flashcards.service.js","App.js","utils/colors.js","web-build/register-service-worker.js"],"names":["FlashcardsBackend","userToken","this","FLASHCARD_STORAGE_KEY","Promise","resolve","reject","a","async","AsyncStorage","getItem","results","JSON","parse","title","getDecks","decks","mergeItem","stringify","questions","questionCard","push","setItem","FlashCardsService","userKey","flashCardMockBackEnd","getDeck","saveDeckTitle","question","answer","addCardToDeck","App","View","style","styles","container","TouchableOpacity","onPress","then","console","warn","Text","testText","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","color","borderRadius","borderColor","borderWidth","padding","navigator","window","addEventListener","serviceWorker","register","scope","info","catch","error"],"mappings":"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","file":"static/js/app.5e8a7779.chunk.js","sourcesContent":["import {AsyncStorage} from 'react-native';\r\n\r\nexport default class FlashcardsBackend {\r\n\r\n    constructor(userToken) {\r\n        this.FLASHCARD_STORAGE_KEY = userToken;\r\n    }\r\n\r\n\r\n    getDecks() {\r\n        return new Promise(async (resolve, reject) => {\r\n            try {\r\n                const results = await AsyncStorage.getItem(this.FLASHCARD_STORAGE_KEY, null);\r\n                return resolve(JSON.parse(results));\r\n            } catch (e) {\r\n                return reject(e);\r\n            }\r\n        });\r\n    }\r\n\r\n    getDeck(title) {\r\n        return new Promise(async (resolve, reject) => {\r\n            try {\r\n                const decks = await this.getDecks();\r\n                return resolve(decks[title])\r\n            } catch (e) {\r\n                return reject(e);\r\n            }\r\n        });\r\n    }\r\n\r\n    saveDeckTitle(title) {\r\n        return new Promise(async (resolve, reject) => {\r\n            try {\r\n                await AsyncStorage.mergeItem(this.FLASHCARD_STORAGE_KEY, JSON.stringify({\r\n                    [title]: {\r\n                        title,\r\n                        questions: []\r\n                    }\r\n                }))\r\n                return resolve(true);\r\n            } catch (e) {\r\n                return reject(e);\r\n            }\r\n        });\r\n    }\r\n\r\n    addCardToDeck(title, questionCard) {\r\n        return new Promise(async (resolve, reject) => {\r\n            try {\r\n                const decks = await this.getDecks();\r\n                decks[title].questions.push(questionCard)\r\n                await AsyncStorage.setItem(this.FLASHCARD_STORAGE_KEY, JSON.stringify(decks));\r\n                return resolve(true);\r\n            } catch (e) {\r\n                return reject(e);\r\n            }\r\n        });\r\n    }\r\n}\r\n","import FlashcardsBackend from \"../backend/Flashcards.backend\";\r\n\r\nexport default class FlashCardsService {\r\n\r\n    constructor(userKey) {\r\n        this.flashCardMockBackEnd = new FlashcardsBackend(userKey);\r\n    }\r\n\r\n    getDecks() {\r\n        return this.flashCardMockBackEnd.getDecks();\r\n    }\r\n\r\n    getDeck(title) {\r\n        return this.flashCardMockBackEnd.getDeck(title);\r\n    }\r\n\r\n    saveDeckTitle(title) {\r\n        return this.flashCardMockBackEnd.saveDeckTitle(title);\r\n    }\r\n\r\n    addCardToDeck(title, question, answer) {\r\n        return this.flashCardMockBackEnd.addCardToDeck(title, {question, answer});\r\n    }\r\n\r\n\r\n}\r\n","import React from 'react';\nimport {StyleSheet, Text, TouchableOpacity, View} from 'react-native';\nimport {ORANGE} from \"./utils/colors\";\nimport FlashCardsService from \"./services/Flashcards.service\";\n\nfunction getDecks() {\n    const service = new FlashCardsService(\"test\");\n    service.getDecks().then((results) => {\n        console.warn(results);\n    })\n}\n\nfunction getDeck() {\n    const service = new FlashCardsService(\"test\");\n    service.getDeck('test').then((results) => {\n        console.warn(results);\n    })\n}\n\nfunction saveDeckTitle() {\n    const service = new FlashCardsService(\"test\");\n    service.saveDeckTitle('test').then((results) => {\n        console.warn(results);\n    })\n}\n\n\nfunction addCardToDeck() {\n    const service = new FlashCardsService(\"test\");\n    service.addCardToDeck('test',\n        \"What is a closure?\",\n        \"The combination of a function and the lexical environment within which that function was declared.\"\n    ).then((results) => {\n        console.warn(results);\n    })\n}\n\n\nexport default function App() {\n\n    return (\n        <View style={styles.container}>\n            <TouchableOpacity onPress={() => getDecks()}>\n                <Text style={styles.testText}>Get Decks</Text>\n            </TouchableOpacity>\n            <TouchableOpacity onPress={() => getDeck()}>\n                <Text style={styles.testText}>Get Deck</Text>\n            </TouchableOpacity>\n            <TouchableOpacity onPress={() => saveDeckTitle()}>\n                <Text style={styles.testText}>Save Title</Text>\n            </TouchableOpacity>\n            <TouchableOpacity onPress={() => addCardToDeck()}>\n                <Text style={styles.testText}>Add Card to deck</Text>\n            </TouchableOpacity>\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: '#fff',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n\n    testText: {\n        color: ORANGE,\n        borderRadius: 25,\n        borderColor: ORANGE,\n        borderWidth: 1,\n        padding: 10\n    }\n});\n","export const WHITE = '#fff'\r\nexport const PURPLE = '#a64Ac9'\r\nexport const RED = '#e91721'\r\nexport const YELLOW = '#fccd04'\r\nexport const ORANGE = '#ff6e29'\r\nexport const PINK = '#ffb48f'\r\nexport const CHAMPAGNE = '#f5e6cc'\r\nexport const BLUE = '#17e9e0'\r\nexport const BLACK = '#000'\r\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function() {\n    navigator.serviceWorker\n      .register('/flashcards/expo-service-worker.js', { scope: '/flashcards/' })\n      .then(function(info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function(error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n"],"sourceRoot":""}